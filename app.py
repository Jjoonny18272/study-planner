import streamlit as st
import json
import os
from datetime import datetime

def load_data(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_data(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

st.set_page_config(page_title="Study Planner", layout="wide")
st.title("üìö ‡πÅ‡∏≠‡∏û‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á ‡πÜ")

menu = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤", ["‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á", "‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á"])

if menu == "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á":
    st.header("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á")

    with st.form("add_schedule"):
        subject = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤")
        date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô")
        start_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        end_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
        priority = st.number_input("‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (1 = ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)", min_value=1, max_value=5, value=3)

        submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")

        if submitted:
            if subject.strip() == "":
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤")
            elif start_time >= end_time:
                st.error("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
            else:
                schedule = load_data("schedule_table.json")
                schedule.append({
                    "subject": subject.strip(),
                    "date": date.strftime("%Y-%m-%d"),
                    "start": start_time.strftime("%H:%M"),
                    "end": end_time.strftime("%H:%M"),
                    "priority": priority
                })
                save_data("schedule_table.json", schedule)
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

elif menu == "‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á":
    st.header("üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")

    schedule = load_data("schedule_table.json")

    if not schedule:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
    else:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° date, start time, ‡πÅ‡∏•‡∏∞ priority
        schedule.sort(key=lambda x: (x["date"], x["start"], x["priority"]))

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        st.markdown("### üîé ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)")
        st.dataframe(schedule, use_container_width=True)

        st.markdown("### üß© ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        # ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô
        dates = sorted(list(set(item["date"] for item in schedule)))
        for d in dates:
            st.subheader(f"üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {d}")
            daily = [item for item in schedule if item["date"] == d]
            daily.sort(key=lambda x: (x["start"], x["priority"]))
            for item in daily:
                st.markdown(f"""
                - ‚è∞ {item['start']} - {item['end']} | üìù {item['subject']} | ‚≠ê ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {item['priority']}
                """)

