import streamlit as st
import json
import os
from datetime import datetime, timedelta

def load_data(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_data(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

st.title("üìö ‡πÅ‡∏≠‡∏û‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")

menu = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤", [
    "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
    "‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
    "‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠",
    "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô / ‡∏™‡∏£‡∏∏‡∏õ"
])

if menu == "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ":
    st.header("üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠")
    email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
    level = st.selectbox("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô", ["‡∏°.‡∏ï‡πâ‡∏ô", "‡∏°.‡∏õ‡∏•‡∏≤‡∏¢", "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"])

    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"):
        if not name or not email:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
        else:
            users = load_data("users.json")
            users.append({"name": name, "email": email, "level": level})
            save_data("users.json", users)
            st.success("‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

elif menu == "‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤":
    st.header("üóìÔ∏è ‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
    subjects = ["‡∏Ñ‡∏ì‡∏¥‡∏ï", "‡∏ß‡∏¥‡∏ó‡∏¢‡πå", "‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"]
    subject = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤", subjects)
    start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡πà‡∏≤‡∏ô")
    end_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏≠‡πà‡∏≤‡∏ô")
    start_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡πà‡∏≤‡∏ô")
    end_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏≠‡πà‡∏≤‡∏ô")

    if start_date > end_date:
        st.error("‚ùå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
    elif start_time >= end_time:
        st.error("‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏≠‡πà‡∏≤‡∏ô")
    else:
        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á"):
            schedule = load_data("schedule.json")
            schedule.append({
                "subject": subject,
                "start_date": start_date.strftime("%Y-%m-%d"),
                "end_date": end_date.strftime("%Y-%m-%d"),
                "start_time": start_time.strftime("%H:%M"),
                "end_time": end_time.strftime("%H:%M"),
                "done_days": []
            })
            save_data("schedule.json", schedule)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

elif menu == "‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠":
    st.header("üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
    schedule = load_data("schedule.json")

    if not schedule:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
    else:
        # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô ‡πÜ
        expanded_schedule = []
        for idx, item in enumerate(schedule):
            sd = datetime.strptime(item["start_date"], "%Y-%m-%d")
            ed = datetime.strptime(item["end_date"], "%Y-%m-%d")
            delta_days = (ed - sd).days
            for i in range(delta_days + 1):
                day = sd + timedelta(days=i)
                date_str = day.strftime("%Y-%m-%d")
                expanded_schedule.append({
                    "schedule_idx": idx,
                    "subject": item["subject"],
                    "date": date_str,
                    "start_time": item["start_time"],
                    "end_time": item["end_time"],
                    "done": date_str in item["done_days"]
                })

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° date ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°
        expanded_schedule.sort(key=lambda x: (x["date"], x["start_time"]))

        for i, entry in enumerate(expanded_schedule):
            col1, col2, col3 = st.columns([6, 1, 1])
            with col1:
                st.write(f"üìÖ {entry['date']} ‡πÄ‡∏ß‡∏•‡∏≤ {entry['start_time']} - {entry['end_time']} : ‡∏ß‡∏¥‡∏ä‡∏≤ {entry['subject']}")
            with col2:
                if not entry["done"]:
                    if st.button(f"‚úì ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à {i}", key=f"done-{i}"):
                        schedule = load_data("schedule.json")  # reload
                        done_days = schedule[entry["schedule_idx"]].get("done_days", [])
                        done_days.append(entry["date"])
                        schedule[entry["schedule_idx"]]["done_days"] = done_days
                        save_data("schedule.json", schedule)
                        st.experimental_rerun()
                else:
                    st.markdown("‚úîÔ∏è")
            with col3:
                if st.button(f"‚ùå ‡∏•‡∏ö {i}", key=f"del-{i}"):
                    schedule = load_data("schedule.json")
                    idx = entry["schedule_idx"]
                    schedule.pop(idx)
                    save_data("schedule.json", schedule)
                    st.experimental_rerun()


