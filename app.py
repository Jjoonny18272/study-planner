import streamlit as st
import json
import os
from datetime import datetime

# ---------------------- CONFIG ----------------------
st.set_page_config(page_title="üìö Study Scheduler", layout="wide")

st.markdown("""
    <style>
    .main {background-color: #f5f8ff;}
    .title { font-size:28px; font-weight:bold; color:#3366cc; }
    .section { background-color: #eef3fb; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
    </style>
""", unsafe_allow_html=True)

# ---------------------- SESSION ----------------------
st.session_state.setdefault("logged_in", False)
st.session_state.setdefault("current_user", None)

# ---------------------- FUNCTIONS ----------------------
def get_user_filename():
    user = st.session_state.current_user
    return f"data_{user['email'].replace('@', '_at_')}.json"

def load_data(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_data(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# ---------------------- LOGIN ----------------------
if not st.session_state.logged_in:
    st.image("https://cdn-icons-png.flaticon.com/512/3135/3135715.png", width=100)
    st.markdown('<div class="title">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</div>', unsafe_allow_html=True)
    with st.form("login_form"):
        email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
        name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠")
        submitted = st.form_submit_button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        if submitted:
            if email.strip() == "" or name.strip() == "":
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
            else:
                st.session_state.logged_in = True
                st.session_state.current_user = {
                    "email": email.strip(),
                    "name": name.strip()
                }
                st.success("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                st.experimental_rerun()
    st.stop()

# ---------------------- MAIN MENU ----------------------
menu = st.sidebar.selectbox("üìå ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤", ["‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á", "‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á", "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"])

# ---------------------- LOGOUT ----------------------
if menu == "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö":
    st.session_state.logged_in = False
    st.session_state.current_user = None
    st.success("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
    st.experimental_rerun()

filename = get_user_filename()

# ---------------------- ADD SCHEDULE ----------------------
if menu == "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á":
    st.markdown('<div class="title">üóìÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠</div>', unsafe_allow_html=True)
    with st.form("add_form"):
        subject = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤")
        date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô")
        start_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        end_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
        priority = st.number_input("‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (1 = ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)", min_value=1, max_value=5, value=3)
        submitted = st.form_submit_button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
        if submitted:
            if subject.strip() == "":
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤")
            elif start_time >= end_time:
                st.error("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
            else:
                schedule = load_data(filename)
                schedule.append({
                    "subject": subject.strip(),
                    "date": date.strftime("%Y-%m-%d"),
                    "start": start_time.strftime("%H:%M"),
                    "end": end_time.strftime("%H:%M"),
                    "priority": priority
                })
                save_data(filename, schedule)
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# ---------------------- VIEW SCHEDULE ----------------------
elif menu == "‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á":
    st.markdown(f'<div class="title">üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {st.session_state.current_user["name"]}</div>', unsafe_allow_html=True)
    schedule = load_data(filename)

    if not schedule:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    else:
        schedule.sort(key=lambda x: (x["date"], x["start"], x["priority"]))

        st.markdown("### üîç ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)")
        st.dataframe(schedule, use_container_width=True)

        st.markdown("### üß© ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        dates = sorted(list(set(item["date"] for item in schedule)))
        for d in dates:
            st.subheader(f"üìÜ {d}")
            daily = [item for item in schedule if item["date"] == d]
            daily.sort(key=lambda x: (x["start"], x["priority"]))
            for idx, item in enumerate(daily):
                col1, col2 = st.columns([5, 1])
                with col1:
                    st.markdown(f"**{item['start']} - {item['end']}** | {item['subject']} | ‚≠ê ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {item['priority']}")
                with col2:
                    if st.button("üóë ‡∏•‡∏ö", key=f"del-{d}-{idx}"):
                        schedule.remove(item)
                        save_data(filename, schedule)
                        st.experimental_rerun()
