import streamlit as st
import json
import os
from datetime import datetime, timedelta
import random

# ---------------------- CONFIG ----------------------
st.set_page_config(
    page_title="üìò STUDY PLANNER",
    page_icon="üìò",
    layout="wide"
)

st.markdown("""
    <style>
    .title {
        font-size: 28px;
        font-weight: bold;
        color: #3366cc;
        margin-bottom: 10px;
    }
    .main {
        background-color: #f5f8ff;
    }
    .completed {
        text-decoration: line-through;
        color: #888888;
        background-color: #f0f0f0;
        padding: 5px;
        border-radius: 5px;
    }
    </style>
""", unsafe_allow_html=True)

# ---------------------- SESSION ----------------------
st.session_state.setdefault("logged_in", False)
st.session_state.setdefault("current_user", None)

# ---------------------- FUNCTIONS ----------------------
def get_user_filename():
    user = st.session_state.current_user
    return f"data_{user['email'].replace('@', '_at_').replace('.', '_dot_')}.json"

def load_data(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_data(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def priority_icon(priority):
    colors = {1: "üî¥", 2: "üü†", 3: "üü°", 4: "üîµ", 5: "üü¢"}
    return colors.get(priority, "‚ö™")

def calc_total_hours(schedule):
    total = 0
    for i in schedule:
        start = datetime.strptime(i["start"], "%H:%M")
        end = datetime.strptime(i["end"], "%H:%M")
        total += (end - start).seconds / 3600
    return total

def generate_date_range(start_date, end_date):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"""
    dates = []
    current_date = start_date
    while current_date <= end_date:
        dates.append(current_date)
        current_date += timedelta(days=1)
    return dates

def auto_schedule_subject(subject_name, exam_date, hours_per_day, start_date=None):
    """‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    if start_date is None:
        start_date = datetime.now().date()
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ
    days_available = (exam_date - start_date).days
    if days_available <= 0:
        return []
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô
    schedule_items = []
    current_date = start_date
    
    # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
    time_slots = [
        ("08:00", "10:00"), ("10:00", "12:00"), ("13:00", "15:00"), 
        ("15:00", "17:00"), ("19:00", "21:00"), ("21:00", "23:00")
    ]
    
    days_count = 0
    while current_date < exam_date and days_count < days_available:
        # ‡∏™‡∏∏‡πà‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        start_time, end_time = random.choice(time_slots)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        actual_hours = (datetime.strptime(end_time, "%H:%M") - 
                       datetime.strptime(start_time, "%H:%M")).seconds / 3600
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        if actual_hours > hours_per_day:
            # ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
            start_dt = datetime.strptime(start_time, "%H:%M")
            end_dt = start_dt + timedelta(hours=hours_per_day)
            end_time = end_dt.strftime("%H:%M")
        
        schedule_items.append({
            "subject": subject_name,
            "date": current_date.strftime("%Y-%m-%d"),
            "start": start_time,
            "end": end_time,
            "priority": 3,
            "completed": False,
            "auto_generated": True
        })
        
        current_date += timedelta(days=1)
        days_count += 1
    
    return schedule_items

# ---------------------- LOGIN ----------------------
if not st.session_state.logged_in:
    st.markdown('<div class="title">üìò STUDY PLANNER</div>', unsafe_allow_html=True)
    st.caption("‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö ‚è≥üìö")

    with st.form("login_form", clear_on_submit=True):
        email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
        name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠")
        submitted = st.form_submit_button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        
        if submitted:
            if email.strip() == "" or name.strip() == "":
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
            else:
                st.session_state.logged_in = True
                st.session_state.current_user = {
                    "email": email.strip(),
                    "name": name.strip()
                }
                st.success("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                st.rerun()

if not st.session_state.logged_in:
    st.stop()

# ---------------------- HEADER AFTER LOGIN ----------------------
st.markdown('<div class="title">üìò STUDY PLANNER</div>', unsafe_allow_html=True)
st.markdown(f"üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì **{st.session_state.current_user['name']}** ‚Äî ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
st.divider()

# ---------------------- MENU ----------------------
menu = st.sidebar.selectbox("üìå ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤", ["‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", "‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á", "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"])
filename = get_user_filename()

# ---------------------- LOGOUT ----------------------
if menu == "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö":
    st.session_state.logged_in = False
    st.session_state.current_user = None
    st.success("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
    st.rerun()

# ---------------------- ADD SCHEDULE (MANUAL) ----------------------
if menu == "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥":
    st.subheader("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥)")

    with st.form("add_form"):
        subject = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤")
        
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        with col2:
            end_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
            
        start_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        end_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
        priority = st.number_input("‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (1 = ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)", min_value=1, max_value=5, value=3)
        submitted = st.form_submit_button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á")

        if submitted:
            if subject.strip() == "":
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤")
            elif start_time >= end_time:
                st.error("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
            elif start_date > end_date:
                st.error("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
            else:
                schedule = load_data(filename)
                date_range = generate_date_range(start_date, end_date)
                added_count = 0
                
                for single_date in date_range:
                    schedule.append({
                        "subject": subject.strip(),
                        "date": single_date.strftime("%Y-%m-%d"),
                        "start": start_time.strftime("%H:%M"),
                        "end": end_time.strftime("%H:%M"),
                        "priority": priority,
                        "completed": False,
                        "auto_generated": False
                    })
                    added_count += 1
                
                save_data(filename, schedule)
                st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ({added_count} ‡∏ß‡∏±‡∏ô)")

# ---------------------- ADD SCHEDULE (AUTO) ----------------------
elif menu == "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥":
    st.subheader("ü§ñ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    st.info("üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö")

    with st.form("auto_add_form"):
        subject = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤")
        exam_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö", min_value=datetime.now().date() + timedelta(days=1))
        hours_per_day = st.number_input("‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô", min_value=0.5, max_value=8.0, value=2.0, step=0.5)
        
        submitted = st.form_submit_button("ü§ñ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")

        if submitted:
            if subject.strip() == "":
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤")
            else:
                schedule = load_data(filename)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                auto_items = auto_schedule_subject(subject.strip(), exam_date, hours_per_day)
                
                if not auto_items:
                    st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                else:
                    schedule.extend(auto_items)
                    save_data(filename, schedule)
                    st.success(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ({len(auto_items)} ‡∏ß‡∏±‡∏ô)")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
                    st.subheader("üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á")
                    for item in auto_items[:5]:  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                        st.write(f"üìÖ {item['date']} | ‚è∞ {item['start']}-{item['end']} | üìö {item['subject']}")
                    
                    if len(auto_items) > 5:
                        st.write(f"... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(auto_items) - 5} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

# ---------------------- VIEW SCHEDULE ----------------------
elif menu == "‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á":
    st.subheader("üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    schedule = load_data(filename)

    if not schedule:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    else:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        schedule.sort(key=lambda x: (x["date"], x["start"], x["priority"]))

        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        total_hours = calc_total_hours(schedule)
        completed_count = len([x for x in schedule if x.get("completed", False)])
        total_count = len(schedule)
        completion_rate = (completed_count / total_count * 100) if total_count > 0 else 0
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°", f"{total_hours:.1f} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
        with col2:
            st.metric("‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß", f"{completed_count}/{total_count}")
        with col3:
            st.metric("üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤", f"{completion_rate:.1f}%")

        st.markdown("### üß© ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        dates = sorted(list(set(item["date"] for item in schedule)))
        for d in dates:
            st.subheader(f"üìÜ {d}")
            daily = [item for item in schedule if item["date"] == d]
            daily.sort(key=lambda x: (x["start"], x["priority"]))
            
            for idx, item in enumerate(daily):
                completed = item.get("completed", False)
                is_auto = item.get("auto_generated", False)
                
                col1, col2, col3, col4 = st.columns([1, 5, 1, 1])
                
                with col1:
                    # Checkbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡πä‡∏Å‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                    new_status = st.checkbox(
                        "‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏ö", 
                        value=completed, 
                        key=f"complete-{d}-{idx}"
                    )
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
                    if new_status != completed:
                        item["completed"] = new_status
                        save_data(filename, schedule)
                        st.rerun()
                
                with col2:
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                    style_class = "completed" if completed else ""
                    auto_badge = "ü§ñ" if is_auto else ""
                    
                    content = (f"{priority_icon(item['priority'])} "
                              f"**{item['start']} - {item['end']}** | "
                              f"{item['subject']} {auto_badge} | "
                              f"‚≠ê ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {item['priority']}")
                    
                    if completed:
                        st.markdown(f'<div class="completed">{content}</div>', unsafe_allow_html=True)
                    else:
                        st.markdown(content)
                
                with col3:
                    if completed:
                        st.success("‚úÖ")
                    else:
                        st.info("‚è≥")
                
                with col4:
                    if st.button("üóë", key=f"del-{d}-{idx}"):
                        schedule.remove(item)
                        save_data(filename, schedule)
                        st.rerun()

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        st.markdown("### üîç ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        display_data = []
        for item in schedule:
            completed_status = "‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß" if item.get("completed", False) else "‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à"
            auto_status = "ü§ñ ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥" if item.get("auto_generated", False) else "‚úã ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á"
            
            display_data.append({
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": item["date"],
                "‡∏ß‡∏¥‡∏ä‡∏≤": item["subject"],
                "‡πÄ‡∏ß‡∏•‡∏≤": f"{item['start']} - {item['end']}",
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç": item["priority"],
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": completed_status,
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": auto_status
            })
        
        st.dataframe(display_data, use_container_width=True)
